	// trans bills

	q = psql.Select(
		sm.Columns("guid", "ledger", "name", "amount", "billtype", "bill_credit_period"),
		sm.From("trn_bill"),
		sm.Where(psql.Quote("guid").EQ(psql.Arg(ledgerID))),
	)

	query, args, err = q.Build(c)

	if err != nil {
		c.JSON(500, gin.H{
			"error":   err.Error(),
			"message": "Failed to build query",
		})
		return
	}

	err = pgxscan.Select(ctx, db.GetDB(), &bills, query, args...)

	if err != nil {
		c.JSON(500, gin.H{
			"error":   err.Error(),
			"message": "Failed to retrieve bills",
		})
		return
	}

	// tran batch
	q = psql.Select(
		sm.Columns("guid", "item", "name", "quantity", "amount", "godown"),
		sm.From("trn_batch"),
		sm.Where(psql.Quote("guid").EQ(psql.Arg(ledgerID))),
	)

	query, args, err = q.Build(c)

	if err != nil {
		c.JSON(500, gin.H{
			"error":   err.Error(),
			"message": "Failed to build query",
		})
		return
	}

	err = pgxscan.Select(ctx, db.GetDB(), &batch, query, args...)

	if err != nil {
		c.JSON(500, gin.H{
			"error":   err.Error(),
			"message": "Failed to retrieve batch",
		})
		return
	}

	// tran bank
	q = psql.Select(
		sm.Columns("guid", "ledger", "transaction_type", "instrument_date", "instrument_number", "bank_name", "amount", "bankers_date"),
		sm.From("trn_bank"),
		sm.Where(psql.Quote("guid").EQ(psql.Arg(ledgerID))),
	)

	query, args, err = q.Build(c)

	if err != nil {
		c.JSON(500, gin.H{
			"error":   err.Error(),
			"message": "Failed to build query",
		})
		return
	}

	err = pgxscan.Select(ctx, db.GetDB(), &bank, query, args...)

	if err != nil {
		c.JSON(500, gin.H{
			"error":   err.Error(),
			"message": "Failed to retrieve bank",
		})
		return
	}